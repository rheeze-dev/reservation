#pragma checksum "G:\dev\reservation\Views\Asin\Reservation.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e1becdb87e7a60247e0dd9ae91541d5ba34fde67"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Asin_Reservation), @"mvc.1.0.view", @"/Views/Asin/Reservation.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Asin/Reservation.cshtml", typeof(AspNetCore.Views_Asin_Reservation))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "G:\dev\reservation\Views\_ViewImports.cshtml"
using AsinTransientAndApartment;

#line default
#line hidden
#line 2 "G:\dev\reservation\Views\_ViewImports.cshtml"
using AsinTransientAndApartment.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e1becdb87e7a60247e0dd9ae91541d5ba34fde67", @"/Views/Asin/Reservation.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"944ac3da14e7a0af6a549436d58c02eb404c5639", @"/Views/_ViewImports.cshtml")]
    public class Views_Asin_Reservation : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 10774, true);
            WriteLiteral(@"<div class=""container"">
    <h2 class=""text-center mt-0"">Reservation</h2>
    <hr class=""divider my-4"">

    <!-- THE CALENDAR -->
    <div class=""btnUpdate"" id=""calendar""></div>

</div>
<!-- /.content-wrapper -->
<!-- Page specific script -->
<script>
        $(function () {

            /* initialize the external events
             -----------------------------------------------------------------*/
            function init_events(ele) {
                ele.each(function () {

                    // create an Event Object (http://arshaw.com/fullcalendar/docs/event_data/Event_Object/)
                    // it doesn't need to have a start or end
                    var eventObject = {
                        title: $.trim($(this).text()) // use the element's text as the event title
                    }

                    // store the Event Object in the DOM element so we can get to it later
                    $(this).data('eventObject', eventObject)

                    // mak");
            WriteLiteral(@"e the event draggable using jQuery UI
                    $(this).draggable({
                        zIndex: 1070,
                        revert: true, // will cause the event to go back to its
                        revertDuration: 0  //  original position after the drag
                    })

                })
            }

            init_events($('#external-events div.external-event'))

            /* initialize the calendar
             -----------------------------------------------------------------*/
            //Date for the calendar events (dummy data)
            var date = new Date()
            var d = date.getDate(),
                m = date.getMonth(),
                y = date.getFullYear()
            $('#calendar').fullCalendar({
                header: {
                    left: 'prev,next today',
                    center: 'title',
                    right: ' '
                },
                buttonText: {
                    today: 'today',
        ");
            WriteLiteral(@"        },


                editable: true,
                droppable: true, // this allows things to be dropped onto the calendar !!!
                drop: function (date, allDay) { // this function is called when something is dropped

                    // retrieve the dropped element's stored Event Object
                    var originalEventObject = $(this).data('eventObject')

                    // we need to copy it, so that multiple events don't have a reference to the same object
                    var copiedEventObject = $.extend({}, originalEventObject)

                    // assign it the date that was reported
                    copiedEventObject.start = date
                    copiedEventObject.allDay = allDay
                    copiedEventObject.backgroundColor = $(this).css('background-color')
                    copiedEventObject.borderColor = $(this).css('border-color')

                    // render the event on the calendar
                    // the last `true` ");
            WriteLiteral(@"argument determines if the event ""sticks"" (http://arshaw.com/fullcalendar/docs/event_rendering/renderEvent/)
                    $('#calendar').fullCalendar('renderEvent', copiedEventObject, true)

                    // is the ""remove after drop"" checkbox checked?
                    if ($('#drop-remove').is(':checked')) {
                        // if so, remove the element from the ""Draggable Events"" list
                        $(this).remove()
                    }

                }
            })

            /* ADDING EVENTS */
            var currColor = '#3c8dbc' //Red by default
            //Color chooser button
            var colorChooser = $('#color-chooser-btn')
            $('#color-chooser > li > a').click(function (e) {
                e.preventDefault()
                //Save color
                currColor = $(this).css('color')
                //Add color effect to button
                $('#add-new-event').css({ 'background-color': currColor, 'border-color': currCol");
            WriteLiteral(@"or })
            })
            $('#add-new-event').click(function (e) {
                e.preventDefault()
                //Get value and make sure it is not null
                var val = $('#new-event').val()
                if (val.length == 0) {
                    return
                }

                //Create events
                var event = $('<div />')
                event.css({
                    'background-color': currColor,
                    'border-color': currColor,
                    'color': '#fff'
                }).addClass('external-event')
                event.html(val)
                $('#external-events').prepend(event)

                //Add draggable funtionality
                init_events(event)

                //Remove event from text input
                $('#new-event').val('')
            })

            $(""#calendar"").on(""click"", "".fc-past"", function () {
                //alert(""Error!"");
                var date = $(this).attr(""data");
            WriteLiteral(@"-date"");
                //alert(date);
                Swal.fire({
                    type: 'error',
                    title: 'Error!',
                    text: 'This date is not available.',
                })
            })
        })</script>

<script>
        //btnUpdate
        $(function () {

            $(""#calendar"").on(""click"", "".fc-today"", function () {
                var userId = $(this).attr(""data-id"");
                 var addGuestFirstName = $(""#AddGuestFirstNameText"").val();
                var addGuestLastName = $(""#AddGuestLastNameText"").val();
                var addGuestContactNumber = $(""#AddGuestContactNumberText"").val();
                var addGuestNumberOfGuest = $(""#AddGuestNumberOfGuestText"").val();
                var addGuestNumberOfNight = $(""#AddGuestNumberOfNightText"").val();
                var htmlContent = `<div class=""container"">
<div class=""row"">
<div class=""col-md-6"">
<input type=""tect"" id=""AddGuestFirstNameText"" placeholder=""First Name""/>
<d");
            WriteLiteral(@"iv>
<div class=""col-md-6"">
<input type=""tect"" id=""AddGuestLastNameText"" placeholder=""Last Name""/>
<div>
<div class=""col-md-6"">
<input type=""tect"" id=""AddGuestContactNumberText"" placeholder=""Contact Number""/>
<div>
<div class=""col-md-6"">
<input type=""tect"" id=""AddGuestNumberOfGuestText"" placeholder=""Number Of Guest""/>
<div>
<div class=""col-md-6"">
<input type=""tect"" id=""AddGuestNumberOfNightText"" placeholder=""Number Of Night""/>
<div>
</div>`
                Swal.fire({
                    title: 'Guest',
                    html: htmlContent,
                    showCloseButton: true,
                    showCancelButton: true,
                    focusConfirm: false,
                    confirmButtonText: 'Submit',
                    cancelButtonText: 'Cancel',
                }).then((result) => {
                    if (result.value) {
                        addGuestFirstName = $(""body"").find(""#AddGuestFirstNameText"").val();
                        addGuestLastName = $(""body"").find");
            WriteLiteral(@"(""#AddGuestLastNameText"").val();
                        addGuestContactNumber = $(""body"").find(""#AddGuestContactNumberText"").val();
                        addGuestNumberOfGuest = $(""body"").find(""#AddGuestNumberOfGuestText"").val();
                        addGuestNumberOfNight = $(""body"").find(""#AddGuestNumberOfNightText"").val();
                        addGuest(addGuestFirstName, addGuestLastName, addGuestContactNumber, addGuestNumberOfGuest, addGuestNumberOfNight);
                    } else if (
                        result.dismiss === Swal.dismissReason.cancel
                    ) {
                        Swal.fire(
                            'Cancelled',
                            '',
                            'error'
                        )
                    }
                })
            });

            $(""#calendar"").on(""click"", "".fc-future"", function () {
                var userId = $(this).attr(""data-id"");
                 var addGuestFirstName = $(""#AddGuestFirst");
            WriteLiteral(@"NameText"").val();
                var addGuestLastName = $(""#AddGuestLastNameText"").val();
                var addGuestContactNumber = $(""#AddGuestContactNumberText"").val();
                var addGuestNumberOfGuest = $(""#AddGuestNumberOfGuestText"").val();
                var addGuestNumberOfNight = $(""#AddGuestNumberOfNightText"").val();
                var htmlContent = `<div class=""container"">
<div class=""row"">
<div class=""col-md-6"">
<input type=""tect"" id=""AddGuestFirstNameText"" placeholder=""First Name""/>
<div>
<div class=""col-md-6"">
<input type=""tect"" id=""AddGuestLastNameText"" placeholder=""Last Name""/>
<div>
<div class=""col-md-6"">
<input type=""tect"" id=""AddGuestContactNumberText"" placeholder=""Contact Number""/>
<div>
<div class=""col-md-6"">
<input type=""tect"" id=""AddGuestNumberOfGuestText"" placeholder=""Number Of Guest""/>
<div>
<div class=""col-md-6"">
<input type=""tect"" id=""AddGuestNumberOfNightText"" placeholder=""Number Of Night""/>
<div>
</div>`
                Swal.fire({
             ");
            WriteLiteral(@"       title: 'Guest',
                    html: htmlContent,
                    showCloseButton: true,
                    showCancelButton: true,
                    focusConfirm: false,
                    confirmButtonText: 'Submit',
                    cancelButtonText: 'Cancel',
                }).then((result) => {
                    if (result.value) {
                        addGuestFirstName = $(""body"").find(""#AddGuestFirstNameText"").val();
                        addGuestLastName = $(""body"").find(""#AddGuestLastNameText"").val();
                        addGuestContactNumber = $(""body"").find(""#AddGuestContactNumberText"").val();
                        addGuestNumberOfGuest = $(""body"").find(""#AddGuestNumberOfGuestText"").val();
                        addGuestNumberOfNight = $(""body"").find(""#AddGuestNumberOfNightText"").val();
                        addGuest(addGuestFirstName, addGuestLastName, addGuestContactNumber, addGuestNumberOfGuest, addGuestNumberOfNight);
                    } ");
            WriteLiteral(@"else if (
                        result.dismiss === Swal.dismissReason.cancel
                    ) {
                        Swal.fire(
                            'Cancelled',
                            '',
                            'error'
                        )
                    }
                })
            });

            function addGuest(addGuestFirstName, addGuestLastName, addGuestContactNumber, addGuestNumberOfGuest, addGuestNumberOfNight) {
                $.ajax({
                    url: """);
            EndContext();
            BeginContext(10775, 41, false);
#line 247 "G:\dev\reservation\Views\Asin\Reservation.cshtml"
                     Write(Html.Raw(Url.Action("AddGuest", "Guest")));

#line default
#line hidden
            EndContext();
            BeginContext(10816, 776, true);
            WriteLiteral(@""",
                    Type: ""post"",
                    data: {
                        firstName: addGuestFirstName,
                        lastName: addGuestLastName,
                        contactNumber: addGuestContactNumber,
                        numberOfGuest: addGuestNumberOfGuest,
                        numberOfNight: addGuestNumberOfNight
                    },
                    success: function (data) {
                        console.log(data);
                        Swal.fire(
                            'Submitted',
                            'Your file has been submitted.',
                            'success'
                        );
                    }
                });
            }
        });
    </script>

");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
